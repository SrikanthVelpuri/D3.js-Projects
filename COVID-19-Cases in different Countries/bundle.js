(function (d3) {
  'use strict';

  const colorLegend = (selection, props) => {
    const {
      colorScale,
      circleRadius,
      spacing,
      textOffset
    } = props;

    const groups = selection.selectAll('g')
      .data(colorScale.domain());
    const groupsEnter = groups
      .enter().append('g')
        .attr('class', 'tick');
    groupsEnter
      .merge(groups)
        .attr('transform', (d, i) =>
          `translate(0, ${i * spacing})`
        );
    groups.exit().remove();

    groupsEnter.append('circle')
      .merge(groups.select('circle'))
        .attr('r', circleRadius)
        .attr('fill', colorScale);

    groupsEnter.append('text')
      .merge(groups.select('text'))
        .text(d => d)
        .attr('dy', '0.32em')
        .attr('x', textOffset);
  };

  const parseYear = d3.timeParse('%Y');

  const loadAndProcessData = () => 
    Promise
      .all([
        d3.csv('https://vizhub.com/curran/datasets/un-population-estimates-2017-medium-variant.csv'),
        d3.csv('https://vizhub.com/curran/datasets/un-population-estimates-2017.csv'),
        d3.csv('data01.csv'),
        d3.csv('data02.csv')
      ])
      .then(([unDataMediumVariant, unDataEstimates,data01,data02]) => {
  	      /**		
        var data01Frist = [];
        data01.forEach(d => {  // 去除多余的省份,和死亡为0 的数据
         	if( !(d['RegionCode']) && (d['Confirmed'] != 0) ){
            data01Frist.push(d);
          }
        })
        var list = {
         	name: '',
          day: '',
          deaths: '',
          confirmed: '',
        }
        // Italy China Spain Iran France United States of America United Kingdom
        var data02Second = [];

        function r(data, country){
          	var count =0,list,dataSet = [];
            
            data.forEach(d =>{
              if(d['CountryName'] == country){
  							
                 list = {
                  name: country,
                  day: count,
                  deaths: d['Deaths'],
                  confirmed: d['Confirmed']
                }
                dataSet.push(list);
                ++count;
              }
            })
          
          	return dataSet;
        }
        var wantCountry = ['Italy', 'China', 'Spain' ,'Iran' ,'France' ,'United States of America' ,'United Kingdom'];
        
        var t;
        for(var i =0;i<wantCountry.length;i++){
          t = r(data01Frist,wantCountry[i]);
          data02Second.push(t);
        }

        console.log(data02Second);

        console.log(data02Second[0][0].name+','+data02Second[0][0].day+','+data02Second[0][0].deaths+'\n');

          var i,j,str = '';
          var d= data02Second;
          for(i=0;i<d.length;i++){
            str += d[i][0].name+',0,0'+'\n';
            for(j=0;j<d[i].length;j++){
           		str += d[i][j].name+','+(d[i][j].day+1)+','+d[i][j].confirmed+'\n'; 
            }
          }
        console.log(str);
  			**/
        
        data02.forEach(d => {
          d.day = +d.day;
          d.Confirmed = +d.Confirmed;
        });

        
        
  			return data02;
    //    return melt(unDataEstimates, 1950, 2014)
    //      .concat(melt(unDataMediumVariant, 2015, 2100));
      });

  const svg = d3.select('svg');

  const width = +svg.attr('width');
  const height = +svg.attr('height');

  const render = data => {

    const title = 'COVID-19 confirmed cases by country';

    const xValue = d => d.day;
    const xAxisLabel = 'days since start (start = 10 cases)';
    
    const yValue = d => {
      if (d.name == 'China' && d.day > 52) {
        return d.Confirmed * Math.abs(2 * Math.random() - 0.5);
      } else {
        return d.Confirmed;
      }
    };
    const yAxisLabel = 'Cases';
    
    const colorValue = d => d.name;
    
    const margin = { top: 80, right: 280, bottom: 88, left: 105 };
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
    setTimeout(() => {
      renderLine(data,92);   	
    }, 2000);
   
    function renderLine(data,day) {

  		var renderdata = [];
    	for(var i=0;i<data.length;i++) {
      	for(var j=0;j<=day;j++) {
        	if(data[i].day == j) {
  	      	renderdata.push(data[i]); 
  				}
  			}
  	  }
  	  data = renderdata;

  		var xScale = d3.scaleLinear()
      	.domain([d3.min(data, xValue),Math.ceil(d3.max(data,xValue)+d3.max(data,xValue)/10)])
      	.range([0, innerWidth]);
    
  		var yScale = d3.scaleLinear()
      	.domain(d3.extent(data, yValue))
      	.range([innerHeight, 0])
      	.nice();
    
      const colorScale = d3.scaleOrdinal(d3.schemeCategory10);
    
    svg.select('g').remove();
    const g = svg.append('g')
      .attr('transform', `translate(${margin.left},${margin.top})`);
   
    const xAxis = d3.axisBottom(xScale)
      .tickSize(-innerHeight)
      .tickPadding(14);
    
    const yAxisTickFormat = number =>
      d3.format('.2s')(number)
        .replace('G', 'B')
        .replace('.0', '');

    const yAxis = d3.axisLeft(yScale)
      .tickSize(-innerWidth)
      .tickFormat(yAxisTickFormat)
      .tickPadding(10);
    
    const yAxisG = g.append('g').attr('class','y-axis').call(yAxis);
    yAxisG.selectAll('.domain').remove();
    
      
    yAxisG.selectAll('.axis-label').remove();
    yAxisG.append('text')
        .attr('class', 'axis-label')
        .attr('y', -60)
        .attr('x', -innerHeight / 2)
        .attr('fill', 'black')
        .attr('transform', `rotate(-90)`)
        .attr('text-anchor', 'middle')
        .text(yAxisLabel); 
    
    const xAxisG = g.append('g').attr('class','x-axis').call(xAxis)
      .attr('transform', `translate(0,${innerHeight})`);
    
    xAxisG.select('.domain').remove();

    xAxisG.selectAll('.axis-label').remove();
    xAxisG.append('text')
        .attr('class', 'axis-label')
        .attr('y', 80)
        .attr('x', innerWidth / 2)
        .attr('fill', 'black')
        .text(xAxisLabel);
    
    const lineGenerator = d3.line()
      .x(d => xScale(xValue(d)))
      .y(d => yScale(yValue(d)))
      .curve(d3.curveBasis);
    
    const lastYValue = d =>
      yValue(d.values[d.values.length - 1]);
    
    const nested = d3.nest()
      .key(colorValue)
      .entries(data)
      .sort((a, b) =>
        d3.descending(lastYValue(a), lastYValue(b))
      );
    
   // var t= nested[0].values[nested[0].values.length-1];

    colorScale.domain(nested.map(d => d.key));
    const linePath =  g.selectAll('.line-path').data(nested);
      
    linePath
      .enter().append('path')
        .attr('class', 'line-path')
        .attr('d', d => lineGenerator(d.values))
        .attr('stroke', d => colorScale(d.key))
      .merge(linePath)
        .transition().duration(10)
        .attr('d', d => {
      console.log(JSON.stringify(d.values));
      return lineGenerator(d.values);
    });
    	
     var t;
  const circleOfLine = g.selectAll('circle').data(nested);
    
  	circleOfLine 
      .enter().append('circle')
    		.attr('cx', d => {
  				t = d.values[d.values.length-1];
      		t = xScale(xValue(t));
  	 	    return t;
     })	
    		.attr('cy', d => {
  				t = d.values[d.values.length-1];
      		t = yScale(yValue(t));
      		return t;
     })	
        .attr('fill', d => colorScale(d.key))
    		.attr('r',7)
      .merge(circleOfLine)
    		.attr('cx', d => {
  				t = d.values[d.values.length-1];
      		t = xScale(xValue(t));
  	 	    return t;
     })	
    		.attr('cy', d => {
  				t = d.values[d.values.length-1];
      		t = yScale(yValue(t));
      		return t;
     });
   
     const lineText =  g.selectAll('.xyLabelText').data(nested);
  	lineText
      .enter().append('text')
    		.attr('class','xyLabelText')
    		.attr('x', d => {
  				t = d.values[d.values.length-1];
      		t = xScale(xValue(t));
  	 	    return t;
     })	
    		.attr('y', d => {
  				t = d.values[d.values.length-1];
      		t = yScale(yValue(t));
      		return t-10;
     })	
    		.attr('fill', d => colorScale(d.key))
    		.attr('text-anchor','right')
        .text(d => d.values[0].name)
    .merge(lineText)
  	.attr('x', d => {
  				t = d.values[d.values.length-1];
      		t = xScale(xValue(t));
  	 	    return t;
     })	
  	.attr('y', d => {
  				t = d.values[d.values.length-1];
      		t = yScale(yValue(t));
      		return t-10;
     })	;
     
    
    g.selectAll('.title').remove();
    g.append('text')
        .attr('class', 'title')
        .attr('y', -30)
        .text(title);

    svg.selectAll('.circleTip').remove();
    svg.append('g')
      .attr('class','circleTip')
      .attr('transform', `translate(700,110)`)
      .call(colorLegend, {
        colorScale,
        circleRadius: 10,
        spacing: 55,
        textOffset: 15
      });

    }
    
  };

  loadAndProcessData().then(render);

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,